import re
from django.shortcuts import render
from rest_framework import viewsets, filters, status, decorators

from vulmatch.server.arango_helpers import ArangoDBHelper, ATTACK_TYPES, CWE_TYPES, SOFTWARE_TYPES, CAPEC_TYPES
from vulmatch.server.utils import Pagination, Response
from vulmatch.worker.tasks import new_task
from . import models
from vulmatch.server import serializers
from django_filters.rest_framework import FilterSet, Filter, DjangoFilterBackend, ChoiceFilter, BaseCSVFilter, CharFilter, BooleanFilter, MultipleChoiceFilter
from drf_spectacular.utils import extend_schema, extend_schema_view, OpenApiParameter
from arango_cti_processor.config import MODE_COLLECTION_MAP
from textwrap import dedent
# Create your views here.

@extend_schema_view(
    create=extend_schema(
        responses={201: serializers.JobSerializer
        },
        request=serializers.NVDTaskSerializer,
        summary="Will download CVEs using cloudflare",
    ),
    list=extend_schema(
        responses={200: ArangoDBHelper.get_paginated_response_schema('vulnerabilities')}, filters=True,
        summary="Get CVEs",
        description="This endpoint only returns the vulnerability object for matching CVEs, they must query the CVE ID endpoint for full information",
    )
)   
class CveView(viewsets.ViewSet):
    openapi_tags = ["CVE"]
    pagination_class = Pagination("vulnerabilities")
    filter_backends = [DjangoFilterBackend]
    serializer_class = serializers.JobSerializer
    lookup_url_kwarg = 'stix_id'

    
    class filterset_class(FilterSet):
        id = MultipleChoiceFilter(label='The STIX ID(s) of the object wanted (e.g. `vulnerability--1234`)')
        cve_id = CharFilter(label='(optional): ID of CVE (e.g. `CVE-2023-22518`)')
        description = CharFilter(label='(stix description): The description if the object. Is wildcard')
        has_kev = BooleanFilter(label=dedent('''
        (optional, boolean), only returns CVEs that are reported by CISA KEV
        * this essentially searches for embedded relationships between sighting (`object-refs`) and CVE Vulnerability
        '''))
        cpes_vulnerable = BaseCSVFilter(label=dedent('''
        (optional, cpe string), only returns results for which matching CPEs are vulnerable to matching CVEs
        * this essentially searches for CPE relationships to indicator with relationship_type = `in-vulnerable`
        * note, if wildcard value used, will consider any values for property. user must pass vendor and product not as wildcard
        * this property searches `cwe-cpe (is-vulnerable)` relationships generated by arango_cti_processor
        '''))
        cpes_in_pattern = BaseCSVFilter(label=dedent('''
        (optional, cpe string), only returns results for which matching CPEs are found in CVE pattern
        * this essentially searches for CPE relationships to indicator with relationship_type = `in-pattern`
        * note, if wildcard value used, will consider any values for property. user must pass vendor and product not as wildcard values in string. Can omit end of string (rest will be treated as wildcard values)
        * this property searches `cwe-cpe (in-pattern)` relationships generated by arango_cti_processor
        '''))
        weakness_id = BaseCSVFilter(label=dedent("""(optional, cwe id): list of CWEs that are linked to CVEs
	* this property searches `cve-cwe` relationships generated by arango_cti_processor"""))
        attack_id = BaseCSVFilter(label=dedent("""(optional, attaxk id): list of ATT&CKS that are linked to CVEs
	* note, this is not a direct relationship, this property searches relationships generated by arango_cti_processor `cve-cwe`->`cwe-capec`->`capec-attack` to produce the list of ATT&CK techniques."""))

    def create(self, request, *args, **kwargs):
        serializer = serializers.NVDTaskSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        job = new_task(serializer.data, models.JobType.CVE_UPDATE)
        job_s = serializers.JobSerializer(instance=job)
        return Response(job_s.data, status=status.HTTP_201_CREATED)
    
    def list(self, request, *args, **kwargs):
        return ArangoDBHelper('', request, 'vulnerabilities').get_vulnerabilities()
    
    @decorators.action(methods=['GET'], detail=True)
    def bundle(self, request, *args, stix_id=None, **kwargs):
        return ArangoDBHelper('', request).get_cve_bundle(stix_id)
    
    def retrieve(self, request, *args, stix_id=None, **kwargs):
        return ArangoDBHelper('nvd_cve_vertex_collection', request).get_object(stix_id)
    

@extend_schema_view(
    create=extend_schema(
        responses={201: serializers.JobSerializer
        },
        request=serializers.NVDTaskSerializer,
        summary="Will download CPEs using cloudflare",
    ),
    list=extend_schema(
        summary='Search CPEs',
    ),
    retrieve=extend_schema(
        summary='Get CPE object',
    ),
) 
class CpeView(viewsets.ViewSet):
    openapi_tags = ["CPE"]
    pagination_class = Pagination("objects")
    filter_backends = [DjangoFilterBackend]
    serializer_class = serializers.JobSerializer
    lookup_url_kwarg = 'cpe_match_string'

    #def get_queryset(self):
    #    return models.Job.objects.all()
    
    class filterset_class(FilterSet):
        id = BaseCSVFilter(label='(stix id): The STIX ID(s) of the object wanted (e.g. `software--1234`)')
        type = ChoiceFilter(choices=[(f,f) for f in SOFTWARE_TYPES], label="(stix type): The STIX object `type`(s) of the object wanted (e.g. `software`).")
        cpe_match_string = CharFilter(label='(optional): ID of CVE (e.g. `cpe:2.3:o:microsoft:windows_10`). Can use wildcards or can omit end of string (rest will be treated as wildcard values)')
        vendor = CharFilter(label='(optional, uses cpe match string 3rd part)')
        product = CharFilter(label='(optional, uses cpe match string 4th part)')

        product_type = ChoiceFilter(choices=[('operating-system', 'Operating System'), ('application', 'Application'), ('hardware', 'Hardware')],
                        label='(optional, uses cpe match string 2nd part)'
        )
        cve_vulnerable = BaseCSVFilter(label='(optional, list of CVE ids): only returns CPEs vulnerable to CVE')
        in_cve_pattern = BaseCSVFilter(label='(optional, list of CVE ids): only returns CPEs in a CVEs Pattern')

    def create(self, request, *args, **kwargs):
        serializer = serializers.NVDTaskSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        job = new_task(serializer.data, models.JobType.CPE_UPDATE)
        job_s = serializers.JobSerializer(instance=job)
        return Response(job_s.data, status=status.HTTP_201_CREATED)
    
    def list(self, request, *args, **kwargs):
        return ArangoDBHelper('', request).get_softwares()

    def retrieve(self, request, *args, cpe_match_string=None, **kwargs):
        return ArangoDBHelper(f'nvd_cpe_vertex_collection', request).get_software_by_name(cpe_match_string)
    

    
@extend_schema_view(
    create=extend_schema(
        responses={201: serializers.JobSerializer
        },
        request=serializers.MitreTaskSerializer,
        summary="Will download ATT&CK bundle using cloudflare",
    ),
    list=extend_schema(
        summary='Search ATT&CK objects',
    ),
    retrieve=extend_schema(
        summary='Get ATT&CK object',
    ),
)  
class AttackView(viewsets.ViewSet):
    openapi_tags = ["ATT&CK"]
    lookup_url_kwarg = 'stix_id'

    filter_backends = [DjangoFilterBackend]
    MATRIX_TYPES = ["mobile", "ics", "enterprise"]
    @property
    def matrix(self):
        m: re.Match = re.search(r"/attack-(\w+)/", self.request.path)
        return m.group(1)
    serializer_class = serializers.JobSerializer

    class filterset_class(FilterSet):
        id = BaseCSVFilter(label='(stix id): The STIX ID(s) of the object wanted (e.g. `attack-pattern--1234`)')
        attack_id = BaseCSVFilter(label='(attack ID): The ATTACK ids of the object wanted (e.g. `T1659`)')
        description = CharFilter(label='(stix description): The description if the object. Is wildcard')
        name = CharFilter(label='(stix name): The name if the object. Is wildcard')
        type = ChoiceFilter(choices=[(f,f) for f in ATTACK_TYPES], label='(stix type): The STIX object `type`(s) of the object wanted (e.g. `attack-pattern`).')

    
    def create(self, request, *args, **kwargs):
        serializer = serializers.MitreTaskSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        data = serializer.data.copy()
        data['matrix'] = self.matrix
        job = new_task(data, models.JobType.ATTACK_UPDATE)
        job_s = serializers.JobSerializer(instance=job)
        return Response(job_s.data, status=status.HTTP_201_CREATED)

    
    def list(self, request, *args, **kwargs):
        return ArangoDBHelper('', request).get_attack_objects(self.matrix)
    
    def retrieve(self, request, *args, stix_id=None, **kwargs):
        return ArangoDBHelper(f'mitre_attack_{self.matrix}_vertex_collection', request).get_object(stix_id)
    
    
@extend_schema_view(
    create=extend_schema(
        responses={201: serializers.JobSerializer
        },
        request=serializers.MitreTaskSerializer,
        summary="Will download CWEs using cloudflare",
    ),
    list=extend_schema(
        summary='Search CWE objects',
    ),
    retrieve=extend_schema(
        summary='Get CWE object',
    ),
)  
class CweView(viewsets.ViewSet):
    openapi_tags = ["CWE"]
    lookup_url_kwarg = 'stix_id'

    filter_backends = [DjangoFilterBackend]

    serializer_class = serializers.JobSerializer

    class filterset_class(FilterSet):
        id = BaseCSVFilter(label='(stix id): The STIX ID(s) of the object wanted (e.g. `weakness--1234`)')
        cwe_id = BaseCSVFilter(label='(cwe ID): The CWE ids of the object wanted (e.g. `CWE-242`)')
        description = CharFilter(label='(stix description): The description if the object. Is wildcard')
        name = CharFilter(label='(stix name): The name if the object. Is wildcard')
        type = ChoiceFilter(choices=[(f,f) for f in CWE_TYPES], label='(stix type): The STIX object `type`(s) of the object wanted (e.g. `weakness`).')

    
    def create(self, request, *args, **kwargs):
        serializer = serializers.MitreTaskSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        data = serializer.data.copy()
        job = new_task(data, models.JobType.CWE_UPDATE)
        job_s = serializers.JobSerializer(instance=job)
        return Response(job_s.data, status=status.HTTP_201_CREATED)

    
    def list(self, request, *args, **kwargs):
        return ArangoDBHelper('mitre_cwe_vertex_collection', request).get_weakness_or_capec_objects()
    
    def retrieve(self, request, *args, stix_id=None, **kwargs):
        return ArangoDBHelper('mitre_cwe_vertex_collection', request).get_object(stix_id)
    
   
@extend_schema_view(
    create=extend_schema(
        responses={201: serializers.JobSerializer
        },
        request=serializers.MitreTaskSerializer,
        summary="Will download CAPECs using cloudflare",
    ),
    list=extend_schema(
        summary='Search CAPEC objects',
    ),
    retrieve=extend_schema(
        summary='Get CAPEC object',
    ),
)
class CapecView(viewsets.ViewSet):
    openapi_tags = ["CAPEC"]
    lookup_url_kwarg = 'stix_id'

    filter_backends = [DjangoFilterBackend]

    serializer_class = serializers.JobSerializer

    class filterset_class(FilterSet):
        id = BaseCSVFilter(label='(stix id): The STIX ID(s) of the object wanted (e.g. `attack-pattern--1234`)')
        capec_id = BaseCSVFilter(label='(capec ID): The CAPEC ids of the object wanted (e.g. `CAPEC-112`)')
        
        description = CharFilter(label='(stix description): The description if the object. Is wildcard')
        name = CharFilter(label='(stix name): The name if the object. Is wildcard')
        type = ChoiceFilter(choices=[(f,f) for f in CAPEC_TYPES], label='(stix type): The STIX object `type`(s) of the object wanted (e.g. `attack-pattern`).')

    
    def create(self, request, *args, **kwargs):
        serializer = serializers.MitreTaskSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        data = serializer.data.copy()
        job = new_task(data, models.JobType.CAPEC_UPDATE)
        job_s = serializers.JobSerializer(instance=job)
        return Response(job_s.data, status=status.HTTP_201_CREATED)

    
    def list(self, request, *args, **kwargs):
        return ArangoDBHelper('mitre_capec_vertex_collection', request).get_weakness_or_capec_objects(types=CAPEC_TYPES)
    
    def retrieve(self, request, *args, stix_id=None, **kwargs):
        return ArangoDBHelper('mitre_capec_vertex_collection', request).get_object(stix_id)
    
   
@extend_schema_view(
    create=extend_schema(
        responses={201: serializers.JobSerializer
        },
        #request=serializers.ACPSerializer
        parameters=[
            OpenApiParameter(name='mode', enum=list(MODE_COLLECTION_MAP), location=OpenApiParameter.PATH)
        ],
        description="These endpoints will trigger the relevant arango_cti_processor mode to generate relationships.",
        summary="Trigger arango_cti_processor `mode` to generate relationships."
    ),
)
class ACPView(viewsets.ViewSet):
    openapi_tags = ["Arango CTI Processor"]
    serializer_class = serializers.ACPSerializer

    def create(self, request, *args, **kwargs):
        serializer = serializers.ACPSerializerWithMode(data={**request.data, **kwargs})
        serializer.is_valid(raise_exception=True)
        data = serializer.data.copy()
        job = new_task(data, models.JobType.CTI_PROCESSOR)
        job_s = serializers.JobSerializer(instance=job)
        return Response(job_s.data, status=status.HTTP_201_CREATED)

@extend_schema_view(
    list=extend_schema(
        description="search jobs",
        summary="search jobs",
        responses={200: serializers.JobSerializer}
    ),
    retrieve=extend_schema(
        description="get job by ID",
        summary="get job by ID",
    ),
)
class JobView(viewsets.ModelViewSet):
    http_method_names = ["get"]
    serializer_class = serializers.JobSerializer
    filter_backends = [DjangoFilterBackend]
    pagination_class = Pagination("jobs")
    openapi_tags = ["Jobs"]
    lookup_url_kwarg = 'job_id'

    def get_queryset(self):
        return models.Job.objects.all()
    class filterset_class(FilterSet):
        @staticmethod
        def get_type_choices():
            choices = list(models.JobType.choices)
            cti_modes = list(MODE_COLLECTION_MAP)
            for mode in cti_modes:
                type = models.JobType.CTI_PROCESSOR
                choices.append((f"{type}--{mode}", f"The `{mode}` mode of {type}"))

            for mode in AttackView.MATRIX_TYPES:
                type = models.JobType.ATTACK_UPDATE
                choices.append((f"{type}--{mode}", f"The `{mode}` mode of {type}"))
            choices.sort(key=lambda x: x[0])
            return choices
        
        type = ChoiceFilter(choices=get_type_choices(), method='filter_type')
        state = Filter()

        def filter_type(self, qs, field_name, value: str):
            query = {field_name: value}
            if '--' in value:
                type, mode = value.split('--')
                query.update({field_name: type, "parameters__mode":mode})
            return qs.filter(**query)
        
    def create(self, request, *args, **kwargs):
        return super().create(request, *args, **kwargs)
